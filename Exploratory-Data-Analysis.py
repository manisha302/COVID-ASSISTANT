# -*- coding: utf-8 -*-
"""Covid_19_Project_Pianalytix.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1tPzFV6enN8M9a2zxYfcU6sXsRXATRVIZ

# *HERE WE ARE CONSIDERING THE TOTAL CASES ACROSS THE WORLD FROM 13 MARCH 2020 TO 29 NOVEMBER 2020.*

- **DATASET IS TAKEN OUR WORLD IN DATA FROM A GITHUB SOURCE** - https://github.com/owid/covid-19-data/tree/master/public/data

- **OBJECTIVE: IT IS TO PREDICT THE LIFE EXPECTANCY**

# **EXPLORATORY DATA ANALYSIS:**
"""

#Reading the Dataset
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
data=pd.read_csv('https://covid.ourworldindata.org/data/owid-covid-data.csv')
print(data)

"""# COLUMNS	DESCRIPTION	 :

-  **iso_code ---	ISO 3166-1 alpha-3 – three-letter country codes	International Organization for Standardization**

   
   
   - **continent ---	Continent of the geographical location	Our World in Data.**
    
   
   
   - **location ---	Geographical location	Our World in Data.**
    
   
           
   - **date ---	Date of observation	Our World in Data.**

   
   
   - **total_cases ---   Total confirmed cases of COVID-19	European Centre for Disease Prevention and Control.**
    
   
   
   - **new_cases ---  New confirmed cases of COVID-19  European Centre for Disease Prevention and Control.**

   
   
  - **new_cases_smoothed  ---  New confirmed cases of COVID-19 (7-day smoothed)	European Centre for Disease Prevention and Control.**

   
   
   - **total_deaths ----	Total deaths attributed to COVID-19	European Centre for Disease Prevention and Control.**
    
   
   
   - **new_deaths ----	New deaths attributed to COVID-19 European Centre for Disease Prevention and Control.**
    
   
   
  -  **new_deaths_smoothed  ----	New deaths attributed to COVID-19 (7-day smoothed)	European Centre for Disease Prevention and Control.**
   
   
   
   
   - **total_cases_per_million ---	Total confirmed cases of COVID-19 per 1,000,000 people	European Centre for Disease Prevention and Control.**
    
   
   
   
   -  **new_cases_per_million ---	New confirmed cases of COVID-19 per 1,000,000 people	European Centre for Disease Prevention and Control.**
    
   
   
   
   -  **new_cases_smoothed_per_million --- 	New confirmed cases of COVID-19 (7-day smoothed) per 1,000,000 people	European Centre for Disease Prevention and Control.**
    
   
   
   
   -  **total_deaths_per_million ---	Total deaths attributed to COVID-19 per 1,000,000 people	European Centre for Disease Prevention and Control.**
    
   
   
   
   -  **new_deaths_per_million ---	 New deaths attributed to COVID-19 per 1,000,000 people	European Centre for Disease Prevention and Control.**
    
   
   
   
   -  **new_deaths_smoothed_per_million  ---	New deaths attributed to COVID-19 (7-day smoothed) per 1,000,000 people	European Centre for Disease Prevention and Control**
    
   
   
   
   -  **reproduction_rate ---	 Real-time estimate of the effective reproduction rate (R) of COVID-19	Arroyo Marioli et al. (2020)**. https://doi.org/10.2139/ssrn.3581633
   
   
    
   
   -  **icu_patients  ---	 Number of COVID-19 patients in intensive care units (ICUs) on a given day	European Centre for Disease Prevention and Control for European countries / COVID Tracking Project for the United States.**
   
   
    
   
   -  **icu_patients_per_million ---	Number of COVID-19 patients in intensive care units (ICUs) on a given day per 1,000,000 people	European Centre for Disease Prevention and Control for European countries / COVID Tracking Project for the United States.**
   
   
   
   
  -  **hosp_patients ---	Number of COVID-19 patients in hospital on a given day	European Centre for Disease Prevention and Control for European countries / COVID Tracking Project for the United States.**
   
   
   
   -  **hosp_patients_per_million ---	Number of COVID-19 patients in hospital on a given day per 1,000,000 people	European Centre for Disease Prevention and Control for European countries / COVID Tracking Project for the United States.**
   
   
   
   -  **weekly_icu_admissions ---	Number of COVID-19 patients newly admitted to intensive care units (ICUs) in a given week	European Centre for Disease Prevention and Control for European countries / COVID Tracking Project for the United States.**
    
    
   
   -  **weekly_icu_admissions_per_million ---	Number of COVID-19 patients newly admitted to intensive care units (ICUs) in a given week per 1,000,000 people	European Centre for Disease Prevention and Control for European countries / COVID Tracking Project for the United States.**
   
   
   
   -  **weekly_hosp_admissions ---	Number of COVID-19 patients newly admitted to hospitals in a given week	European Centre for Disease Prevention and Control for European countries / COVID Tracking Project for the United States.**
   
   
   
   -  **weekly_hosp_admissions_per_million ---	Number of COVID-19 patients newly admitted to hospitals in a given week per 1,000,000 people	European Centre for Disease Prevention and Control for European countries / COVID Tracking Project for the United States.**
   
   
   
   -  **total_tests ---	Total tests for COVID-19	National government reports.**
   
   
   
   -  **new_tests ---	New tests for COVID-19	National government reports.**
   
   
   
   - **new_tests_smoothed ---	New tests for COVID-19 (7-day smoothed). For countries that don't report testing data on a daily basis, we assume that testing changed equally on a daily basis over any periods in which no data was reported. This produces a complete series of daily figures, which is then averaged over a rolling 7-day window	National government reports.**
   
   
   
   -  **total_tests_per_thousand  ---	Total tests for COVID-19 per 1,000 people	National government reports.**
   
   
   
   -  **new_tests_per_thousand  --- New tests for COVID-19 per 1,000 people National government reports.**
   
   
   
   -  **new_tests_smoothed_per_thousand ---- New tests for COVID-19 (7-day smoothed) per 1,000 people	National government reports.**
   
   
   
   -  **tests_per_case ----	Tests conducted per new confirmed case of COVID-19, given as a rolling 7-day average (this is the inverse of positive_rate)	National government reports.**
   
   
   
   -  **positive_rate ---	The share of COVID-19 tests that are positive, given as a rolling 7-day average (this is the inverse of tests_per_case)	National government reports.**
   
   
   -  **tests_units	Units used by the location to report its testing data	National government reports.**
   
   
   -  **stringency_index ---	Government Response Stringency Index: composite measure based on 9 response indicators including school closures, workplace closures, and travel bans, rescaled to a value from 0 to 100 (100 = strictest response)	Oxford COVID-19 Government Response Tracker, Blavatnik School of Government.**
    
   
   
   - **population --- 	Population in 2020	United Nations, Department of Economic and Social Affairs, Population Division, World Population Prospects: The 2019 Revision**
   
   
   
   - **population_density --- Number of people divided by land area, measured in square kilometers, most recent year available	 World Bank – World Development Indicators, sourced from Food and Agriculture Organization and World Bank estimates**
   
   
   
   - **median_age ---  Median age of the population, UN projection for 2020	UN Population Division, World Population Prospects, 2017 Revision**
   
   
   
   
   - **aged_65_older --- 	Share of the population that is 65 years and older, most recent year available	World Bank – World Development Indicators, based on age/sex distributions of United Nations Population Division's World Population Prospects: 2017 Revision.**
   
   
   
   
   - **aged_70_older ---	 Share of the population that is 70 years and older in 2015	United Nations, Department of Economic and Social Affairs, Population Division (2017), World Population Prospects: The 2017 Revision.**
   
   
   
   
   - **gdp_per_capita	Gross domestic product at purchasing power parity (constant 2011 international dollars), most recent year available	World Bank – World Development Indicators, source from World Bank, International Comparison Program database.**
   
   
   
   
   - **extreme_poverty ---	 Share of the population living in extreme poverty, most recent year available since 2010	World Bank – World Development Indicators, sourced from World Bank Development Research Group.**
   
   
   
   
   - **cardiovasc_death_rate --- 	Death rate from cardiovascular disease in 2017 (annual number of deaths per 100,000 people)	Global Burden of Disease Collaborative Network, Global Burden of Disease Study 2017 Results**
   
   
   
   
   - **diabetes_prevalence ---	Diabetes prevalence (% of population aged 20 to 79) in 2017	World Bank – World Development Indicators, sourced from International Diabetes Federation, Diabetes Atlas**
   
   
   
   
   - **female_smokers ---	Share of women who smoke, most recent year available	World Bank – World Development Indicators, sourced from World Health Organization, Global Health Observatory Data Repository.**
   
   
   
   
   - **male_smokers --- 	Share of men who smoke, most recent year available	World Bank – World Development Indicators, sourced from World Health Organization, Global Health Observatory Data Repository**
   
   
   
   
   - **handwashing_facilities ---  Share of the population with basic handwashing facilities on premises, most recent year available	United Nations Statistics Division.**
   
   
   
   
   - **hospital_beds_per_thousand ---  Hospital beds per 1,000 people, most recent year available since 2010	OECD, Eurostat, World Bank, national government records and other sources.**
   
   
   
   
   - **life_expectancy ---	Life expectancy at birth in 2019	James C. Riley, Clio Infra, United Nations Population Division.**
   
   
   
   - **human_development_index --  Summary measure of average achievement in key dimensions of human development: a long and healthy life, being knowledgeable and have a decent standard of living.**
"""

#Top Rows
data.head()

#Top bottom Rows
data.tail()

print("The number of rows in the dataset: " ,data.shape[0])
print("The number of columns in the dataset : ",data.shape[1])

#Using pandas options to set float_format to 2 decimals after the point.
pd.options.display.float_format = '{:.2f}'.format   #This makes the table clear and easy to understand

#Dropping the duplicates
data = data.drop_duplicates()

#Data Set Columns
data.columns

#Data Types in the Dataset.
data.dtypes

#Numerical and Categorical features
numerical_feats = data.dtypes[data.dtypes != "object"].index
print("Number of Numerical features: ", len(numerical_feats))

categorical_feats = data.dtypes[data.dtypes == "object"].index
print("Number of Categorical features: ", len(categorical_feats))

data.describe(include='float').T

data.describe(include='object').T

data.describe(include='all').T

#Distribution of Missing Values in the dataset
sns.distplot(data.isnull().sum())

#Null values in each Feature
data.isnull().sum()

data.info()

#Unique data points in each columns and unique number of data points.
for i in data.columns:
    print(i,":",data[i].nunique())
    print(data[i].unique())

#Skewness and Kurtosis of the target variable
# Skew and kurt
sns.distplot(data['life_expectancy'])
print("Skewness: %f" % data['life_expectancy'].skew())
print("Kurtosis: %f" % data['life_expectancy'].kurt())

"""# UNIVARIATE ANALYSIS:"""

#Checking for Skewness and Kurtosis of every feature and Visualization
plt.figure(figsize=(20,30))
for i in range(len(numerical_feats)):
    plt.subplot(9, 5,i+1)
    sns.distplot(data[numerical_feats[i]])
    plt.title('Skewness ='+str(round(data[numerical_feats[i]].skew(), 2))+'\n Kurtosis ='+str(round(data[numerical_feats[i]].kurt(), 2)),
              fontweight="bold")
plt.tight_layout()

plt.figure(figsize=(20,30))
for i in range(len(numerical_feats)):
    plt.subplot(9, 5, i+1)
    sns.boxplot(data[numerical_feats[i]], orient="v")
    q1 = data[numerical_feats[i]].quantile(0.25)
    q3 = data[numerical_feats[i]].quantile(0.75)
    IQR = q3-q1
    ub = q3+(1.5*IQR)
    lb = q1-(1.5*IQR)
    outliers_count=data[(data[numerical_feats[i]]>ub) | (data[numerical_feats[i]]<lb)][numerical_feats[i]].count()
    plt.title('outliers count = '+str(outliers_count), fontweight="bold")
plt.tight_layout()

#Categorical Distribution

categorical_feats

print("iso_code :")
sns.distplot(data[categorical_feats[0]].value_counts(normalize=True))

print("continent: ")
plt.figure(figsize=(10,10))
Lables=data[categorical_feats[1]].value_counts(normalize=True).index.to_list()
proporation=data[categorical_feats[1]].value_counts(normalize=True).to_list()
colors=['gold','yellowgreen','lightcoral','lightskyblue']
plt.pie(proporation,labels=Lables,colors=colors,autopct='%1.1f%%',shadow=True,)
plt.axis('equal')
plt.show()

print("Location :")
data[categorical_feats[2]].value_counts()

data[categorical_feats[3]].value_counts(normalize=True)

plt.figure(figsize=(10,10))
Lables=data[categorical_feats[4]].value_counts(normalize=True).index.to_list()
proporation=data[categorical_feats[4]].value_counts(normalize=True).to_list()
colors=['gold','yellowgreen','lightcoral','lightskyblue']
plt.pie(proporation,labels=Lables,colors=colors,autopct='%1.1f%%',shadow=True,)
plt.axis('equal')
plt.show()

#Bivariate Analysis
# Population density in each continent
plt.figure(figsize=(20,6) )
sns.barplot(x='continent' , y='population_density' , data=data)
plt.xlabel('CONTINENT' , fontsize=20)
plt.ylabel('POPULATION DENSITY' , fontsize=20)
plt.title('CONTINENT VS POPULATION DENSITY'  , fontsize=20)

"""# WITH RESPECT TO TIME HOW CASES INCREASED OR DECREASED"""

plt.figure(figsize=(20,6))
sns.barplot(x='date' , y='total_cases' , data=data)
plt.xlabel('DATE' , fontsize=20)
plt.ylabel('TOTAL CASES' , fontsize=20)
plt.title('DATE VS TOTAL CASES' , fontsize=20)
plt.show()

"""# WITH RESPECT TO TIME OCCURENCE OF NEW CASES"""

plt.figure(figsize=(20,6))
sns.barplot(x='date' , y='new_cases' , data=data)
plt.xlabel('DATE' , fontsize=20)
plt.ylabel('NEW CASES' , fontsize=20)
plt.title('DATE VS NEW CASES' , fontsize=20)
plt.show()

"""# DISTRIBUTION OF DATE ACROSS NEW CASES USING SCATTER PLOT """

data.plot(kind ='scatter' , x='date' , y='new_cases' , alpha=0.5 , color='green' , figsize=(16,6) , fontsize=10)
plt.xlabel('DATE' , fontsize=15)
plt.ylabel('NEW CASES' , fontsize=15)
plt.title('DATE VS NEW CASES')
plt.show()

"""# Plot shows Death Ration"""

data.plot(kind ='scatter' , x='total_deaths' , y='new_deaths' , alpha=0.5 , color='green' , figsize=(16,6) , fontsize=10)
plt.xlabel('Total Death' , fontsize=15)
plt.ylabel('NEW DEATH' , fontsize=15)
plt.title('TOTAL DEATH VS NEW DEATH')
plt.show()

"""# Death Ration According Median Age person"""

data.plot(kind ='scatter' , x='median_age' , y='total_deaths' , alpha=0.5 , color='BLUE' , figsize=(16,6) , fontsize=10)
plt.xlabel('MEDIAN AGE' , fontsize=15)
plt.ylabel('TOTAL DEATHS' , fontsize=15)
plt.title('TOTAL DEATH VS MEDIAN AGE')
plt.show()

"""# Death Ration Who's Age 65 year"""

data.plot(kind ='scatter' , x='aged_65_older' , y='total_deaths' , alpha=0.5 , color="GREEN" , figsize=(16,6) , fontsize=10)
plt.xlabel('AGED 65 OLDER' , fontsize=15)
plt.ylabel('TOTAL DEATHS' , fontsize=15)
plt.title('TOTAL DEATH VS AGED 65 OLDER AGE')
plt.show()

"""# Death Ration Who's Age 70 year"""

data.plot(kind ='scatter' , x='aged_70_older' , y='total_deaths' , alpha=0.5 , color='red' , figsize=(16,6) , fontsize=10)
plt.xlabel('AGED 70 OLDER' , fontsize=15)
plt.ylabel('TOTAL DEATHS' , fontsize=15)
plt.title('TOTAL DEATH VS AGED 70 OLDER')
plt.show()

"""# Death Cause of Diabetes_prevalance"""

sns.jointplot(x='total_deaths' , y="diabetes_prevalence" , data = data)

"""# Death Cause Of Cardiovascular problem"""

sns.jointplot(x='total_deaths' , y="cardiovasc_death_rate" , data = data)

"""# Relation in Female Smoker and Male Smoker"""

sns.jointplot(x='female_smokers' , y="male_smokers" , data = data)

"""# Death Casue of Smoke(Female)"""

data.plot(kind ='scatter' , x='male_smokers' , y='total_deaths' , alpha=0.5 , color='orange' , figsize=(16,6) , fontsize=10)
plt.xlabel('MALE SMOKER' , fontsize=20)
plt.ylabel('TOTAL DEATH' , fontsize=20)
plt.title('TOTAL DEATH ACCORDING MALE SMOKER' , fontsize=20)
plt.show()

"""# Death Cause of Smoke(Male)"""

data.plot(kind ='scatter' , x='female_smokers' , y='total_deaths' , alpha=0.5 , color='green' , figsize=(16,6) , fontsize=10)
plt.xlabel('FEMALE SMOKER' , fontsize=20)
plt.ylabel('TOTAL DEATH' , fontsize=20)
plt.title('TOTAL DEATH ACCORDING FEAMLE SMOKER' , fontsize=20)
plt.show()

"""# Human Development index"""

plt.figure(figsize=(20,6) )
sns.barplot(x='continent' , y='human_development_index' , data=data )
plt.xlabel('CONTINENT' , fontsize=20)
plt.ylabel('HUMAN DEVELOPMENT INDEX' , fontsize=20)
plt.title('CONTINENT VS TOTAL CASES'  , fontsize=20)

"""# Poverty Vs GDP"""

sns.jointplot(x='gdp_per_capita' , y="extreme_poverty" , data = data)

"""# Scatter plot Total cases vs New Cases :"""

sns.jointplot(x='new_cases' , y="total_cases" , data = data)

"""# Total CASES PER MILLION VS NEW CASES PER MILLION"""

data.total_cases_per_million.plot(kind = 'line' , color = 'green' , label='Total case/ million' , linewidth=4 , alpha=0.8,linestyle=':' , figsize = (16,10) , fontsize=10)

data.new_cases_per_million.plot( color = 'blue' , label='New Case/MILLION' , linewidth=4 , alpha=0.8,linestyle='-.' , figsize = (16,10) , fontsize=10)

plt.legend(loc ='upper right')
plt.xlabel('Total Case/ million',fontsize=10)
plt.ylabel('New Case/ million' , fontsize=10)

plt.title('Total casese VS New Cases'  , fontsize=15)
plt.show()

"""# Avalibility of beds in Hospital"""

data.plot(kind ='scatter' , x='hospital_beds_per_thousand' , y='hosp_patients' , alpha=0.5 , color='brown' , figsize=(16,6) , fontsize=10)
plt.xlabel('HOSPITAL BEDS PER THOUSANDA' , fontsize=15)
plt.ylabel('HOSPITAL PATEINTS' , fontsize=15)
plt.title('HOSPITAL BEDS ACOORDING PATEINTS' , fontsize=20)
plt.show()

"""# Patients who got hospitilize in each continent"""

plt.figure(figsize=(20,6) )
sns.barplot(x='continent' , y='hosp_patients' , data=data)
plt.xlabel('MONTH' , fontsize=20)
plt.ylabel('HOSPITAL PATIENTS' , fontsize=20)
plt.title('HOSPITAL PATIENTS IN EACH CONTINENT'  , fontsize=15)

"""# Weekly admission in Hospital"""

plt.figure(figsize=(20,6))
plt.hist(data['weekly_hosp_admissions'])

"""# POSITIVE RATE"""

plt.figure(figsize=(20,6))
plt.hist(data['positive_rate'])

"""# Life Expectancy at each Age Level( Medain , Age65 , Age70)"""

sns.jointplot(x="life_expectancy" , y="aged_70_older" , data = data)

sns.jointplot(x="life_expectancy" , y="median_age" , data = data)

sns.jointplot(x="life_expectancy" , y="aged_65_older" , data = data)

"""# Handwashing in Each Continent"""

plt.figure(figsize=(20,6) )
sns.barplot(x='continent' , y='handwashing_facilities' , data=data )
plt.xlabel('Continent' , fontsize=20)
plt.ylabel('total cases' , fontsize=20)
plt.title('CONTINENT VS TOTAL CASES'  , fontsize=15)

"""# CHECKING FOR CORRELATION FOR NUMERICAL DATA:"""

plt.figure(figsize=(100,100))
sns.heatmap(data.corr(method='pearson'),annot=True,cmap="YlGnBu", mask=np.triu(data.corr(), k=1))

#### fitting the regression line between all numeric columns v/s life_expectancy 
num_columns_list = data.select_dtypes(exclude='object').columns[1:-1]
plt.figure(figsize = (15, 10))
for i in range(0,len(num_columns_list),5):
    sns.pairplot(data, x_vars=num_columns_list[i:i+5], y_vars='life_expectancy', kind='reg')

#SO HERE WE CAN SEE BEST FIT LINE FOR EACH AND EVERY FEATURE WITH RESPECT TO THE LIFE EXPECTANCY

"""**TARGET VARIABLE DISTRIBUTION IS IT BALANCED OR NOT :**"""

data['life_expectancy'].value_counts()

"""**SEEMS TO BE FINE.**"""